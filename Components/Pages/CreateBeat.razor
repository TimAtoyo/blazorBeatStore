@page "/create-beat"
@using Microsoft.Extensions.Logging
@inject NavigationManager Navigation
@inject IBeatService BeatService
@inject ILogger<CreateBeat> Logger
@inject RootPathService RootPathService
@rendermode InteractiveServer
@inject IWebHostEnvironment _webHostEnvironment
using System.IO;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;
<h3>Create a New Beat</h3>

<div class="container my-10">
    <div class="row">
        <EditForm class="space-y-9" Model="newBeat" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="grid grid-cols-2 gap-5">

                <div class="form-group">
                    <label class="mb-2" for="Title">Title</label>
                    <InputText id="Title" class="form-control" @bind-Value="newBeat.Title" />
                    <ValidationMessage For="() => newBeat.Title" />
                </div>

                <div class="form-group">
                    <label class="mb-2" for="Description">Description</label>
                    <InputText id="Description" class="form-control" @bind-Value="newBeat.Description" />
                    <ValidationMessage For="() => newBeat.Description" />
                </div>

                <div class="form-group">
                    <label class="mb-2" for="Genre">Genre</label>
                    <InputText id="Genre" class="form-control" @bind-Value="newBeat.Genre" />
                    <ValidationMessage For="() => newBeat.Genre" />
                </div>

                <div class="form-group">
                    <label class="mb-2" for="Price">Price</label>
                    <InputNumber id="Price" class="form-control" @bind-Value="newBeat.Price" />
                    <ValidationMessage For="() => newBeat.Price" />
                </div>

                <div class="form-group">
                    <label class="mb-2" for="FilePath">Upload Beat</label>
                    <InputFile OnChange="LoadFiles" multiple />
                    <InputText id="FilePath" class="form-control" @bind-Value="newBeat.FilePath" />
                    <ValidationMessage For="() => newBeat.FilePath" />
                </div>

                <div class="form-group">
                    <label class="mb-2" for="CoverImagePath">Cover Image Path</label>
                    <InputFile OnChange="LoadFiles" multiple />
                    <InputText id="CoverImagePath" class="form-control" @bind-Value="newBeat.CoverImagePath" />
                    <ValidationMessage For="() => newBeat.CoverImagePath" />
                </div>
                <p>
                    <label>
                        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
                        <InputFile OnChange="LoadFiles" multiple />
                    </label>
                </p>


                <div class="form-group">
                    <label class="mb-2" for="UploadedBy">UploadedBy</label>
                    <InputNumber id="UploadedBy" class="form-control" @bind-Value="newBeat.UploadedBy" />
                    <ValidationMessage For="() => newBeat.UploadedBy" />
                </div>

                <div class="form-group">
                    <label class="mb-2" for="GenreId">Genre Id</label>
                    <InputNumber id="GenreId" class="form-control" @bind-Value="newBeat.GenreId" />
                    <ValidationMessage For="() => newBeat.GenreId" />
                </div>

                <div class="form-group">
                    <label class="mb-2" for="Bpm">Bpm</label>
                    <InputNumber id="Bpm" class="form-control" @bind-Value="newBeat.Bpm" />
                    <ValidationMessage For="() => newBeat.Bpm" />
                </div>


            </div>
            <button type="submit" class="btn btn-primary">Create Beat</button>
        </EditForm>
    </div>

</div>

<style>
    #ddUpload {
        left: 0;
        --rz-upload-button-bar-background-color: transparent;
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 100px 0;
    }
</style>

@code {
    private Beat newBeat = new Beat();
    private List<IBrowserFile> loadedFiles = [];
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private string? RootPath;
    private string? EnvironmentName;

    private bool isLoading;

    private async Task HandleValidSubmit()
    {
        // Save the new beat using your service
        await BeatService.CreateBeatAsync(newBeat);
        // Clear the form after submission
        newBeat = new Beat();

        RootPath = RootPathService.GetRootPath();
        EnvironmentName = RootPathService.GetEnvironmentName();

        // navigate back to a beats page
        Navigation.NavigateTo("/beats", true);

    }


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        @* isLoading = true;
        loadedFiles.Clear();
        

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
        var trustedFileName = Path.GetRandomFileName();
        var uploadPath = Path.Combine(
            _webHostEnvironment.ContentRootPath,  // âœ… Corrected property
            "wwwroot",  // Store inside wwwroot for public access
            "BeatImages",
            trustedFileName
        );

                await using FileStream fs = new(uploadPath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                loadedFiles.Add(file);

                Logger.LogInformation(
                    "Unsafe Filename: {UnsafeFilename} File saved: {Filename}",
                    file.Name, trustedFileName);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", 
                    file.Name, ex.Message);
            }
        }

        isLoading = false; *@
    }
}
