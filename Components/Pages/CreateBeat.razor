@page "/create-beat"
@using Microsoft.Extensions.Logging
@inject NavigationManager Navigation
@inject IBeatService BeatService
@inject ILogger<CreateBeat> Logger
@inject RootPathService RootPathService
@rendermode InteractiveServer
@inject IWebHostEnvironment? _webHostEnvironment

using System.IO;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;
<h3>Create a New Beat</h3>

<h3 class="text-3xl font-semibold mb-8 text-center">Create a New Beat</h3>

<div class="container mx-auto px-4 mt-20">
    <div class="max-w-3xl mx-auto">
        <EditForm class="space-y-6" Model="newBeat" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500" />

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                <!-- Title -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="Title">Title</label>
                    <InputText id="Title" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.Title" />
                    <ValidationMessage For="() => newBeat.Title" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- Description -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="Description">Description</label>
                    <InputText id="Description" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.Description" />
                    <ValidationMessage For="() => newBeat.Description" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- Genre -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="Genre">Genre</label>
                    <InputText id="Genre" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.Genre" />
                    <ValidationMessage For="() => newBeat.Genre" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- Price -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="Price">Price</label>
                    <InputNumber id="Price" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.Price" />
                    <ValidationMessage For="() => newBeat.Price" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- File Upload: Beat -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="FilePath">Upload Beat</label>
                    <InputFile OnChange="LoadBeat" multiple class="block w-full text-sm text-gray-700 bg-gray-200 border border-gray-300 rounded-md py-2 px-4 cursor-pointer" />
                    <InputText id="FilePath" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.FilePath" />
                    <ValidationMessage For="() => newBeat.FilePath" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- File Upload: Cover Image -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="CoverImagePath">Cover Image</label>
                    <InputFile OnChange="LoadFiles" multiple class="block w-full text-sm text-gray-700 bg-gray-200 border border-gray-300 rounded-md py-2 px-4 cursor-pointer" />
                    <InputText id="CoverImagePath" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.CoverImagePath" />
                    <ValidationMessage For="() => newBeat.CoverImagePath" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- Uploaded By -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="UploadedBy">Uploaded By</label>
                    <InputNumber id="UploadedBy" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.UploadedBy" />
                    <ValidationMessage For="() => newBeat.UploadedBy" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- Genre ID -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="GenreId">Genre Id</label>
                    <InputNumber id="GenreId" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.GenreId" />
                    <ValidationMessage For="() => newBeat.GenreId" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- Bpm -->
                <div class="form-group">
                    <label class="block mb-2 text-sm font-medium" for="Bpm">Bpm</label>
                    <InputNumber id="Bpm" class="form-input w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" @bind-Value="newBeat.Bpm" />
                    <ValidationMessage For="() => newBeat.Bpm" class="text-red-500 text-sm mt-1" />
                </div>
            <!-- Submit Button -->
            <div class=" pt-8">
                <button type="submit" class="btn btn-primary px-6 py-3 rounded-lg bg-indigo-600 text-white font-semibold hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-300 ease-in-out">
                    Create Beat
                </button>
            </div>
            </div>

        </EditForm>
    </div>
</div>

<style>
    #ddUpload {
        left: 0;
        --rz-upload-button-bar-background-color: transparent;
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 100px 0;
    }
</style>

@code {
    private Beat newBeat = new Beat();
    private List<IBrowserFile> loadedFiles = [];
    private long maxFileSize = 1024 * 1024 * 15;
    private int maxAllowedFiles = 3;

    private string? uploadPath;
    private string? forSavingToDbPath;
    private string? RootPath;
    private string? EnvironmentName;

    private bool isLoading;

    private async Task HandleValidSubmit()
    {
         newBeat.CoverImagePath = forSavingToDbPath;
         newBeat.FilePath = forSavingToDbPath;
        // Save the new beat using your service
        await BeatService.CreateBeatAsync(newBeat);
        // Clear the form after submission
        newBeat = new Beat();

        // navigate back to a beats page
        Navigation.NavigateTo("/", true);

    }

    private async Task LoadBeat(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        
        
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileExtension = Path.GetExtension(file.Name);
                var trustedFileName = Path.GetRandomFileName();
                var finalFileName = Path.ChangeExtension(trustedFileName, fileExtension);
                 uploadPath = Path.Combine(_webHostEnvironment.WebRootPath, "Beats", finalFileName);
                 forSavingToDbPath = Path.Combine("/", "Beats", finalFileName);


                await using FileStream fs = new(uploadPath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                loadedFiles.Add(file);

                Logger.LogInformation(
                    "Unsafe Filename: {UnsafeFilename} File saved: {Filename}",
                    file.Name, trustedFileName);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", 
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                var fileExtension = Path.GetExtension(file.Name);
                var trustedFileName = Path.GetRandomFileName();
                var finalFileName = Path.ChangeExtension(trustedFileName, fileExtension);
                 uploadPath = Path.Combine(_webHostEnvironment.WebRootPath, "BeatImages", finalFileName);
                forSavingToDbPath = Path.Combine("/", "BeatImages", finalFileName);

                await using FileStream fs = new(uploadPath, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                loadedFiles.Add(file);

                Logger.LogInformation(
                    "Unsafe Filename: {UnsafeFilename} File saved: {Filename}",
                    file.Name, trustedFileName);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", 
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
}
